// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model UserEvent {
  @@map("user_events")
  eventId   String  @id @default(uuid()) @map("event_id")
  eventType String @map("event_type")
  aggregateId String? @map("aggregate_id")
  aggregateType String @map("aggregate_type")
  timestamp DateTime @default(now())
  details String

  user User? @relation(fields: [aggregateId], references: [id], onDelete: Cascade)
}

enum UserStatus {
  ACTIVATED
  DEACTIVATED
  DISABLED
}
model User {
  @@map("users")
  id   String  @id @default(uuid())
  email String  @unique
  picture String?
  externalUserId String? @map("external_user_id")
  status UserStatus @default(DEACTIVATED)

  firstName  String?  @map("first_name")
  lastName String?  @map("last_name")

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  events UserEvent[]
}



enum ShopifyAccountInstallStatus {
  PENDING
  PENDING_SHOPIFY_ACCEPT
  ACCEPTED
  COMPLETE
  FAILED
}
enum ShopifyAccountInstallFailedReason {
  NONE
  INSTALL_LINK_EXPIRED
  SHOP_ORIGIN_INVALID
  HMAC_INVALID
  TIMESTAMP_INVALID
  NONCE_INVALID
  USER_INVALID
  SCOPES_INVALID
  SCOPES_MISSING
}
model ShopifyAccountInstall {
  @@map("shopify_account_installs")
  id   String  @id @default(uuid())
  shopifyAccountId String 

  shop String
  timestamp Int
  hmac String
  nonce Int
  scopes String
  authorizationCode String
  installLink String
  accessTokenLink String
  accessToken String

  status ShopifyAccountInstallStatus @default(PENDING)
  failedReason ShopifyAccountInstallFailedReason @default(NONE)

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  account ShopifyAccount? @relation(fields: [shopifyAccountId], references: [id], onDelete: Cascade)
}

model ShopifyAccountEvent {
  @@map("shopify_account_events")
  eventId   String  @id @default(uuid()) @map("event_id")
  eventType String @map("event_type")
  aggregateId String? @map("aggregate_id")
  aggregateType String @map("aggregate_type")
  timestamp DateTime @default(now())
  details String

  account ShopifyAccount? @relation(fields: [aggregateId], references: [id], onDelete: Cascade)
}

enum ShopifyAccountStatus {
  ACTIVE
  INACTIVE
  DISABLED
  PENDING
  PENDING_INSTALL
}
model ShopifyAccount {
  @@map("shopify_accounts")
  id   String  @id @default(uuid())
  userId String?
  shopOrigin String @unique()
  accessToken String
  scopes String

  status ShopifyAccountStatus @default(PENDING_INSTALL)

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  installation ShopifyAccountInstall?
  events ShopifyAccountEvent[]
}