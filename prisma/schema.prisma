// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserEvent {
  eventId       String   @id @default(uuid()) @map("event_id")
  eventType     String   @map("event_type")
  aggregateId   String?  @map("aggregate_id")
  aggregateType String   @map("aggregate_type")
  timestamp     DateTime @default(now())
  details       String

  user User? @relation(fields: [aggregateId], references: [id], onDelete: Cascade)
  @@map("user_events")
}

enum UserStatus {
  ACTIVATED
  DEACTIVATED
  DISABLED
}

model User {
  id             String     @id @default(uuid())
  email          String     @unique
  picture        String?
  externalUserId String?    @map("external_user_id")
  status         UserStatus @default(DEACTIVATED)

  firstName String? @map("first_name")
  lastName  String? @map("last_name")

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  events UserEvent[]
  @@map("users")
}

enum ShopifyAccountInstallStatus {
  PENDING
  PENDING_SHOPIFY_ACCEPT
  ACCEPTED
  COMPLETE
  FAILED
}

enum ShopifyAccountInstallFailedReason {
  NONE
  INSTALL_LINK_EXPIRED
  SHOP_ORIGIN_INVALID
  HMAC_INVALID
  TIMESTAMP_INVALID
  NONCE_INVALID
  USER_INVALID
  SCOPES_INVALID
  SCOPES_MISSING
}

model ShopifyAccountInstall {
  id               String @id @default(uuid())
  shopifyAccountId String @unique @map("shopify_account_id")

  shop              String
  timestamp         Int
  hmac              String
  nonce             Int
  scopes            String
  authorizationCode String @map("authorization_code")
  installLink       String @map("install_link")
  accessTokenLink   String @map("access_token_link")
  accessToken       String @map("access_token")

  status       ShopifyAccountInstallStatus       @default(PENDING)
  failedReason ShopifyAccountInstallFailedReason @default(NONE) @map("failed_reason")

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  account ShopifyAccount? @relation(fields: [shopifyAccountId], references: [id], onDelete: Cascade)
  @@map("shopify_account_installs")
}

model ShopifyAccountEvent {
  eventId       String   @id @default(uuid()) @map("event_id")
  eventType     String   @map("event_type")
  aggregateId   String?  @map("aggregate_id")
  aggregateType String   @map("aggregate_type")
  timestamp     DateTime @default(now())
  details       String

  account ShopifyAccount? @relation(fields: [aggregateId], references: [id], onDelete: Cascade)
  @@map("shopify_account_events")
}

enum ShopifyAccountStatus {
  ACTIVE
  INACTIVE
  DISABLED
  PENDING
  PENDING_INSTALL
}

model ShopifyAccount {
  id          String  @id @default(uuid())
  userId      String? @map("user_id")
  shopOrigin  String  @unique() @map("shop_origin")
  accessToken String  @map("access_token")
  scopes      String

  status ShopifyAccountStatus @default(PENDING_INSTALL)

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  installation ShopifyAccountInstall?
  events       ShopifyAccountEvent[]
  @@map("shopify_accounts")
}

model Event {
  eventId       String   @id @default(uuid()) @map("event_id")
  eventType     String   @map("event_type")
  aggregateId   String?  @map("aggregate_id")
  aggregateType String   @map("aggregate_type")
  timestamp     DateTime @default(now())
  details       Json

  @@map("events")
}

model ProductType {
  uuid String @id @default(uuid())
  id   Int    @unique @default(autoincrement())

  name                 String @map("name")
  manufacturingDetails Json   @map("manufacturing_details")
  option1              Json?  @map("option_1")
  option2              Json?  @map("option_2")
  option3              Json?  @map("option_3")
  livePreview          Json   @map("live_preview")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")



  Product Product[]
  @@map("product_types")
}

model Product {
  uuid String @id @default(uuid())
  id   Int    @unique @default(autoincrement())

  sku           String   @map("sku")
  productTypeId String   @map("product_type_id")
  tags          String[] @map("tags")
  categories    String[] @map("categories")
  image         String?  @map("image")
  svg           String?  @map("svg")
  customOptions Json[]   @map("custom_options")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  productType ProductType @relation(fields: [productTypeId], references: [uuid], onDelete: Cascade)

  @@map("products")
}
