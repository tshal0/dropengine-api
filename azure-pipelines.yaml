name: $(Build.DefinitionName).$(Build.BuildId)__$(Date:yyyy.MM.dd)$(Rev:.rr)
trigger:
  branches:
    include:
      - main
variables:
  DATABASE_URL: ''
  buildConfiguration: 'Release'
  azureServiceConnection: 'DropEngineRM'
  azureSubscription: 'DropEngine-Primary(0eaeda16-3a81-428c-a7d4-427b1354dc02)'
  vmImageName: 'ubuntu-latest'
  location: 'eastus'
  postgresDatabaseUrl: ''
  service: 'dropengine'
  env: 'dev'
  tag: '$(Build.BuildId)'
  imageName: 'dropengine-api'
  acrHostName: ${{ format('acrdropengine{0}.azurecr.io', variables.env)}}
  keyVaultName: ${{ format('kv-{0}-{1}', variables.service, variables.env)}}
  serviceImage: $[ format('{0}:{1}', variables.imageName, variables['Build.BuildId'])]
  webAppUrl: ${{ format('https://app-{0}-{1}.azurewebsites.net/api', variables.service, variables.env)}}
stages:
  - stage: BuildAndRunTests
    jobs:
      - job: BuildAndRunTests
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: '$(azureSubscription)'
              KeyVaultName: '$(keyVaultName)'
              SecretsFilter: '*'
              RunAsPreJob: true
          - task: PowerShell@2
            displayName: 'Set the DATABASE_URL env variable to PostGresDatabaseUrl from the KeyVault'
            inputs:
              targetType: 'inline'
              script: 'Write-Host "##vso[task.setvariable variable=database.url]$(PostgresDatabaseUrl)"'
              showWarnings: true
              pwsh: true
          - task: Npm@1
            displayName: npm install
            inputs:
              command: 'install'
              workingDir: $(System.DefaultWorkingDirectory)
          - task: Npm@1
            displayName: npm run build
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run build'
            continueOnError: false
          - task: Npm@1
            displayName: npm run test (Unit Tests)
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run test'
            continueOnError: true
          - task: PublishTestResults@2
            displayName: 'Publish NestJS Unit Test Results'
            inputs:
              testResultsFiles: '**/junit.xml'
              failTaskOnFailedTests: true
              testRunTitle: 'NestJS Unit Tests (Staging)'
  - stage: PublishARMTemplates
    jobs:
      - job: PublishARMTemplates
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: CmdLine@2
            inputs:
              script: 'dir'
          - task: AzureKeyVault@2 
            inputs:
              azureSubscription: '$(azureSubscription)'
              KeyVaultName: '$(keyVaultName)'
              SecretsFilter: '*'
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/azure'
              includeRootFolder: true
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)_azure.zip'
              replaceExistingArchive: true
              verbose: true
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)_azure.zip'
              artifact: '$(Build.BuildId)_azure'
              publishLocation: 'pipeline'
  - stage: PublishPostmanAPITests
    jobs:
      - job: PublishPostmanAPITests
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: CmdLine@2
            inputs:
              script: 'dir'
          - task: AzureKeyVault@2 
            inputs:
              azureSubscription: '$(azureSubscription)'
              KeyVaultName: '$(keyVaultName)'
              SecretsFilter: '*'
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/postman'
              includeRootFolder: true
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)_postman.zip'
              replaceExistingArchive: true
              verbose: true
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)_postman.zip'
              artifact: '$(Build.BuildId)_postman'
              publishLocation: 'pipeline'
  - stage: PublishPrisma
    jobs:
      - job: PublishPrisma
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: CmdLine@2
            inputs:
              script: 'dir'
          - task: AzureKeyVault@2 
            inputs:
              azureSubscription: '$(azureSubscription)'
              KeyVaultName: '$(keyVaultName)'
              SecretsFilter: '*'
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/prisma'
              includeRootFolder: true
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)_prisma.zip'
              replaceExistingArchive: true
              verbose: true
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)_prisma.zip'
              artifact: '$(Build.BuildId)_prisma'
              publishLocation: 'pipeline'
  - stage: BuildAndPushDockerImage
    jobs:
      - job: BuildAndPushDockerImage
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: PowerShell@2
            displayName: 'ACR Host Name and imageName'
            inputs:
              targetType: 'inline'
              script: 'Write-Output """### TESTING ### $(acrHostName) $(imageName)"""'
              showWarnings: true
              pwsh: true
          - task: Docker@2
            displayName: 'Build MyProject image'
            inputs:
              repository: '$(imageName)'
              command: build
              Dockerfile: '**/Dockerfile'
              tags: |
                $(Build.BuildId)
          - task: Docker@2
            displayName: 'Save image to TAR'
            inputs:
              repository: '$(imageName)'
              command: save
              arguments: '--output $(build.artifactstagingdirectory)/$(imageName).image.tar $(imageName):$(Build.BuildId)'
              addPipelineData: false
          - task: PublishPipelineArtifact@1
            displayName: 'Publishing Image as Pipeline Artifact'
            inputs:
              path: $(build.artifactstagingdirectory)
              artifact: 'ContainerImage'