name: $(Build.DefinitionName).$(Build.BuildId)__$(Date:yyyy.MM.dd)$(Rev:.rr)
trigger:
  branches:
    include:
      - main
variables:
  buildConfiguration: 'Release'
  azureServiceConnection: 'DropEngineRM'
  azureSubscription: 'DropEngine-Primary(0eaeda16-3a81-428c-a7d4-427b1354dc02)'
  vmImageName: 'ubuntu-latest'
  location: 'eastus'
  postgresDatabaseUrl: ''
  service: 'dropengine'
  env: 'dev'
  tag: '$(Build.BuildId)'
  imageName: 'dropengine-api'
  acrHostName: ${{ format('acrdropengine{0}.azurecr.io', variables.env)}}
  keyVaultName: ${{ format('kv-{0}-{1}', variables.service, variables.env)}}
  serviceImage: $[ format('{0}:{1}', variables.imageName, variables['Build.BuildId'])]
  webAppUrl: ${{ format('https://app-{0}-{1}.azurewebsites.net/api', variables.service, variables.env)}}
stages:
  - stage: BuildAndRunTests
    jobs:
      - job: BuildAndRunTests
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: '$(azureSubscription)'
              KeyVaultName: '$(keyVaultName)'
              SecretsFilter: '*'
              RunAsPreJob: true
          - task: Npm@1
            displayName: npm install
            inputs:
              command: 'install'
              workingDir: $(System.DefaultWorkingDirectory)
          - task: Npm@1
            displayName: npm run build
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run build'
            continueOnError: false
          - task: Npm@1
            displayName: npm run test (Unit Tests)
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run test'
            continueOnError: true
          - task: PublishTestResults@2
            displayName: 'Publish NestJS Unit Test Results'
            inputs:
              testResultsFiles: '**/junit.xml'
              failTaskOnFailedTests: true
              testRunTitle: 'NestJS Unit Tests (Staging)'
          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: 'coverage/cobertura-coverage.xml'
              failIfCoverageEmpty: true
      - job: DockerComposeIntegrationTests
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: '$(azureSubscription)'
              KeyVaultName: '$(keyVaultName)'
              SecretsFilter: '*'
              RunAsPreJob: true
          - task: DownloadSecureFile@1
            inputs:
              secureFile: 'e2e.docker.env'
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(Agent.TempDirectory)'
              Contents: 'e2e.docker.env'
              TargetFolder: '$(System.DefaultWorkingDirectory)'
          - task: Npm@1
            displayName: npm run test:docker:e2e
            inputs:
              command: 'custom'
              customCommand: 'run test:docker:e2e'
              workingDir: $(System.DefaultWorkingDirectory)
  - stage: PublishArtifact
    jobs:
      - job: PublishArtifact
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Get-ChildItem -Path "./_artifact" -Recurse | Remove-Item -Force -Recurse
                New-Item -Path "./" -Name "_artifact" -ItemType "directory" -Force
                New-Item -Path "./_artifact" -Name "src" -ItemType "directory" -Force
                New-Item -Path "./_artifact" -Name "postman" -ItemType "directory" -Force
                New-Item -Path "./_artifact" -Name "migrations" -ItemType "directory" -Force
                New-Item -Path "./_artifact" -Name "azure" -ItemType "directory" -Force

                Copy-Item -Path "./src/*" -Destination "./_artifact/src" -Recurse -Force
                Copy-Item -Path "./postman/*" -Destination "./_artifact/postman" -Recurse -Force
                Copy-Item -Path "./migrations/*" -Destination "./_artifact/migrations" -Recurse -Force
                Copy-Item -Path "./azure/*" -Destination "./_artifact/azure" -Recurse -Force

                Copy-Item -Path "./package.json" -Destination "./_artifact"
                Copy-Item -Path "./tsconfig.json" -Destination "./_artifact"
                Copy-Item -Path "./yarn.lock" -Destination "./_artifact"
                
                $compress = @{
                  Path = "./_artifact/*"
                  CompressionLevel = "Fastest"
                  DestinationPath = "./artifact"
                }
                Compress-Archive @compress
              showWarnings: true
              pwsh: true
              workingDirectory: '$(System.DefaultWorkingDirectory)'
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/artifact.zip'
              artifact: '_artifact'
              publishLocation: 'pipeline'
  # - stage: PublishARMTemplates
  #   jobs:
  #     - job: PublishARMTemplates
  #       pool:
  #         vmImage: 'ubuntu-latest'
  #       steps:
  #         - task: CmdLine@2
  #           inputs:
  #             script: 'dir'
  #         - task: AzureKeyVault@2 
  #           inputs:
  #             azureSubscription: '$(azureSubscription)'
  #             KeyVaultName: '$(keyVaultName)'
  #             SecretsFilter: '*'
  #         - task: ArchiveFiles@2
  #           inputs:
  #             rootFolderOrFile: '$(System.DefaultWorkingDirectory)/azure'
  #             includeRootFolder: true
  #             archiveType: 'zip'
  #             archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber)_azure.zip'
  #             replaceExistingArchive: true
  #             verbose: true
  #         - task: PublishPipelineArtifact@1
  #           inputs:
  #             targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber)_azure.zip'
  #             artifact: '$(Build.BuildNumber)_azure'
  #             publishLocation: 'pipeline'
  # - stage: PublishPostmanAPITests
  #   jobs:
  #     - job: PublishPostmanAPITests
  #       pool:
  #         vmImage: 'ubuntu-latest'
  #       steps:
  #         - task: CmdLine@2
  #           inputs:
  #             script: 'dir'
  #         - task: AzureKeyVault@2 
  #           inputs:
  #             azureSubscription: '$(azureSubscription)'
  #             KeyVaultName: '$(keyVaultName)'
  #             SecretsFilter: '*'
  #         - task: ArchiveFiles@2
  #           inputs:
  #             rootFolderOrFile: '$(System.DefaultWorkingDirectory)/postman'
  #             includeRootFolder: true
  #             archiveType: 'zip'
  #             archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber)_postman.zip'
  #             replaceExistingArchive: true
  #             verbose: true
  #         - task: PublishPipelineArtifact@1
  #           inputs:
  #             targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber)_postman.zip'
  #             artifact: '$(Build.BuildNumber)_postman'
  #             publishLocation: 'pipeline'
  - stage: BuildAndPushDockerImage
    jobs:
      - job: BuildAndPushDockerImage
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: PowerShell@2
            displayName: 'ACR Host Name and imageName'
            inputs:
              targetType: 'inline'
              script: 'Write-Output """### TESTING ### $(acrHostName) $(imageName)"""'
              showWarnings: true
              pwsh: true
          - task: Docker@2
            displayName: 'Build dropengine-api image'
            inputs:
              repository: '$(imageName)'
              command: build
              Dockerfile: '**/Dockerfile'
              tags: |
                $(Build.BuildId)
          - task: Docker@2
            displayName: 'Save image to TAR'
            inputs:
              repository: '$(imageName)'
              command: save
              arguments: '--output $(build.artifactstagingdirectory)/$(imageName).image.tar $(imageName):$(Build.BuildId)'
              addPipelineData: false
          - task: PublishPipelineArtifact@1
            displayName: 'Publishing Image as Pipeline Artifact'
            inputs:
              path: $(build.artifactstagingdirectory)
              artifact: 'ContainerImage'